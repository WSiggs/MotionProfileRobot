
package org.usfirst.frc.team4908.robot;

import java.text.DecimalFormat;

import org.usfirst.frc.team4908.drive.DuxDrive;
import org.usfirst.frc.team4908.util.MotionProfile;
import org.usfirst.frc.team4908.util.Setpoint;

import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Joystick;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */

// TODO: Figure out why time is wrong (Really important)
// TODO: Rewrite MP Class better (ie create setpoint class, etc.)
// TODO: Rewrite this class better

public class Robot extends IterativeRobot 
{
	MotionProfile mp;
	
	Encoder rightEncoder;
    Encoder leftEncoder;
    
    CANTalon frontLeft;
	CANTalon frontRight;
	CANTalon backLeft;
	CANTalon backRight;
		
	Joystick stick1;
    Joystick stick2;
    
    DuxDrive drive;
    
    double kA;
    double kV;
    
    double kP;
    double kI;
    double kD;
    
    double kVD;
    double kAD;
    
    public double maxLeft = 1.0;
    public double maxRight = 1.0;
    public double currentLeft;
    public double currentRight;
    
    // TODO: Fill in these values
    private static final double rearLeftDiameter = 7.202;
    private static final double rearRightDiameter = 7.2115;
    private static final double frontLeftDiameter = 0;
    private static final double frontRightDiameter = 0;
    
    public DecimalFormat df;
    
	double[] mpArray;

    int driveCommand;
    
    double startTime;
    
    boolean wasPressed = false;
    
    int count = 0;
    
    double time;

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() 
    {
    	frontLeft = new CANTalon(1);
    	frontRight = new CANTalon(2);
    	backLeft = new CANTalon(4);
    	backRight = new CANTalon(3);        
        
        stick1 = new Joystick(0);
        stick2 = new Joystick(1);
        
        leftEncoder = new Encoder(3, 2, true);
        leftEncoder.setDistancePerPulse(((2*Math.PI) / 1440)*(rearLeftDiameter/2.0)); // radians per pulse
        leftEncoder.setSamplesToAverage(64);
        rightEncoder = new Encoder(7, 6, false);
        rightEncoder.setDistancePerPulse(((2*Math.PI) / 1440)*(rearRightDiameter/2.0));
        rightEncoder.setSamplesToAverage(64);
        
    	drive = new DuxDrive(frontLeft, backLeft, frontRight, backRight);

    	mp = new MotionProfile(1.0, Math.max(maxLeft, maxRight), -1.0); // accel, max vel, decel
    	
    	df = new DecimalFormat("0.000");
    	
    	kA = 1.0/mp.getAcceleration();
    	kV = 1.0/mp.getV_Cruise();
    	
    	driveCommand = 0; 
    	
    	kVD = 0.5;
    	kAD = 0.5;
    	
    }
    

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() 
    {
        currentLeft = leftEncoder.getRate();
        currentRight = rightEncoder.getRate();

    	
        if(stick2.getRawButton(1) && !wasPressed)
        {
        	rightEncoder.reset();
        	leftEncoder.reset();
        	
        	wasPressed = true;
        	mp.calculatePointsForDistance(10);
        	driveCommand = 1;
        	startTime = System.currentTimeMillis()/1000.0;
        }
        
        if(stick1.getRawButton(1))
        {
        	driveCommand = 0;
        	wasPressed = false;
        }
        
        switch(driveCommand)
        {
        	case 0:
        		drive.duxArcadeDrive(stick1.getRawAxis(1), stick1.getRawAxis(2));
        		break;
        	case 1:
        		mpDrive((System.currentTimeMillis()/1000.0) - startTime);
        		time = (System.currentTimeMillis()/1000.0) - startTime;
        		break;
        	default:
        		break;
        }
        
        
        if(currentLeft > maxLeft)
        {
        	maxLeft = currentLeft;
        }
        
        if(currentRight > maxRight)
        {
        	maxRight = currentRight;
        }
        
    }
    
    public void debugTheStuff(Setpoint currentSetpoint)
    {
        mp.setValuesAtTime(time);

        System.out.println("Time: " + df.format(time) + "\tTotal Time: " + df.format(mp.totalTime) +

        "\nTarget Speed: " + df.format(mp.getSetpoint().getVelocity()) + "\tAverage Speed: " + df.format((leftEncoder.getRate() + rightEncoder.getRate())/2.0)

        + "\nTarget Distance: " + df.format(mp.getSetpoint().getPosition()) + "\tLeft Distance: " + df.format(leftEncoder.getDistance()) + "\tRight Distance: " + df.format(rightEncoder.getDistance()));
    }
    
    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() 
    {
    
    }
    
    public void mpDrive(double time)
    {
    	if(time <= mp.totalTime)
    	{
    		mp.setValuesAtTime(time);
    		drive.duxArcadeDrive(kV*mp.getSetpoint().getVelocity() + kA*mp.getSetpoint().getAcceleration(), 0);
    		if (count > 10)
    		{
    			debugTheStuff(mp.getSetpoint());
    			count = 0;
    		}		
    		count ++;
    	}
    	else
    	{
    		driveCommand = 0;
    		wasPressed = false;
    	}
    }
}
